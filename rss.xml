<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>Feed Name</title>
    <link>http://domain/</link>
    <atom:link href="http://domain/rss.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-au</language>
    <pubDate>Sun, 06 Sep 2015 16:01:06 %z</pubDate>
    <lastBuildDate>Sun, 06 Sep 2015 16:01:06 %z</lastBuildDate>
    
    <item>
      <title>SQL Server Tricks</title>
      <link>http://domain/2015/09/06/sql-server-tricks/</link>
      <pubDate>Sun, 06 Sep 2015 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2015/09/06/sql-server-tricks/</guid>
      <description>&lt;p&gt;Throughout my career I&apos;ve spent more than my fair share of time in the database layer. There&apos;s a current trent in the .Net world of just letting your ORM take care of everything in the data layer for you. I&apos;m a huge proponent of using an ORM for mapping (at work we&apos;re currently using StackExchange&apos;s &lt;a href=&quot;https://github.com/StackExchange/dapper-dot-net&quot;&gt;Dapper.net&lt;/a&gt;). However I&apos;ve always been a little wary of letting the ORM do everything for you. As such I thought I&apos;d jot down a few handy SQL Server tricks I&apos;ve picked up over the years.&lt;/p&gt;
&lt;h3&gt;1. The Output Clause&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms177564.aspx&quot;&gt;&lt;code&gt;OUTPUT&lt;/code&gt; clause&lt;/a&gt; let&apos;s you execute a data modification statement and have it project a result set. In plain English that means that you can perform a &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; have it return a resultset. This has been around since SQL Server 2008 but doesn&apos;t seem to get much attention. An example might be;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;UPDATE  Customers
SET     Archived = 1
OUTPUT  DELETED.Id,
        DELETED.EmailAddress
WHERE   RecentlyLoggedIn = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In one, atomic, operation this would mark all customer who have not recently logged in as archived as well as returning the customer id and email address for all those customers. I&apos;ve seen this often implemented as something along the lines of&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT  C.Id,
        C.EmailAddress
FROM    Customers C
WHERE   C.RecentlyLoggedIn = 0

UPDATE  Customers
SET     Archived = 1
WHERE   RecentlyLoggedIn = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, depending on your locking model applied, another process could come along and change the status of &lt;code&gt;RecentlyLoggedIn&lt;/code&gt; between the two statements. This won&apos;t happen with the original statement I provided. It also means that the entire operation can be rolled back as a transactional unit of work.&lt;/p&gt;
&lt;p&gt;It&apos;s worth noting that with the &lt;code&gt;OUTPUT&lt;/code&gt; clause you get access to both an &lt;code&gt;INSERTED&lt;/code&gt; and a &lt;code&gt;DELETED&lt;/code&gt; psuedo-table to operate on. You can think of the &lt;code&gt;INSERTED&lt;/code&gt; table as the &amp;quot;new&amp;quot; view of the data after the operation has finished (Only applicable with &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt; and &lt;code&gt;MERGE&lt;/code&gt;) statements and the &lt;code&gt;DELETED&lt;/code&gt; table as the view before the operation was executed (Only applicable with the &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;MERGE&lt;/code&gt; operation).&lt;/p&gt;
&lt;h3&gt;2. &lt;code&gt;READPAST&lt;/code&gt; and &lt;code&gt;ROWLOCK&lt;/code&gt; locking hints&lt;/h3&gt;
&lt;p&gt;Both of these &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms187373.aspx&quot;&gt;locking hints&lt;/a&gt; have been available since SQL Server 2008 and work very well together.&lt;/p&gt;
&lt;p&gt;First the &lt;code&gt;ROWLOCK&lt;/code&gt; hint tells SQL Server to, where possible, use a row level lock instead of a page or table lock. This means that instead of locking an entire table, or index page, SQL Server will minimise the locking to only the affected row(s).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;UPDATE  Customers WITH (ROWLOCK)
SET     CustomerEmailed = 1
WHERE   Archived = 1
AND     CustomerEmailed = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;READPAST&lt;/code&gt;, available since SQL Server 2008, instructs SQL Server that if a row in the dataset has a row level lock applied to skip past it. This can be very handy when performing any kind of queue based work. Suppose we have&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT  C.Id,
        C.Email
FROM    Customers C WITH (READPAST)
WHERE   Archived = 1
AND     CustomerEmailed = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this was executed whilst the &lt;code&gt;ROWLOCK&lt;/code&gt; example was executing it would only return those rows where &lt;code&gt;Archived = 1&lt;/code&gt; and &lt;code&gt;CustomerEmailed = 1&lt;/code&gt; was true &lt;em&gt;before&lt;/em&gt; the first transaction started executing. It&apos;s important to note that this means that any locked row is completely ignored from the resultset! Let me reiterate that; If a row is currently locked it will not be in the produced output, even though it would (once any locks are released) appear in the resultset. Depending on what you&apos;re doing this is very powerful... but if you&apos;re not aware of it you may introduce subtle, transient, bugs. So be careful.&lt;/p&gt;
&lt;h3&gt;3. &lt;code&gt;RAISERROR ... WITH NOWAIT&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms178592.aspx&quot;&gt;&lt;code&gt;RAISERROR .. WITH NOWAIT&lt;/code&gt;&lt;/a&gt; let&apos;s you flush a message to SQL Server Management Studio immediately rather than waiting until the end of the batch. This is useful when you&apos;re testing locking to track which statement is causing the execution to block&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;RAISERROR(&apos;Hello world&apos;, 0, 1) WITH NOWAIT
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Testing Locks&lt;/h3&gt;
&lt;p&gt;The final quick tip is how you can test locks. Getting things to run at just the right time can be very tricky and the application of appropriate locking hints is highly dependent on a number of factors (indexes involved, the query analyzer, foreign keys, the statement, etc). So when it comes to testing how locks interact with each other one of the simplest tools is the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms187331.aspx&quot;&gt;&lt;code&gt;WAITFOR DELAY&lt;/code&gt;&lt;/a&gt; expression. This makes SQL Server pause execution of your query until the time elapses. Eg. &lt;code&gt;WAITFOR DELAY &apos;0:00:10&apos;&lt;/code&gt; would wait for 10 seconds to elapse. Using this trick you can construct queries which emulate longer running tasks or concurrent operations.&lt;/p&gt;
&lt;p&gt;To better illustrate all of this we&apos;ll create the simple table used throughout these examples and populate it&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;CREATE TABLE Customers (
    [Id] [int] IDENTITY(1,1) PRIMARY KEY NOT NULL,
    [Email] [varchar](250) NULL,
    [Archived] [bit] NULL,
    [CustomerEmailed] [bit] NULL,
)
GO

INSERT INTO Customers (Email, Archived, CustomerEmailed)
SELECT  &apos;user1@domain.com&apos;, 0, 0
UNION ALL
SELECT  &apos;user2@domain.com&apos;, 1, 1
UNION ALL
SELECT  &apos;user3@domain.com&apos;, 1, 0
UNION ALL
SELECT  &apos;user4@domain.com&apos;, 0, 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-09-06-sql-server-tricks/sample-data.png&quot; alt=&quot;Sample Data&quot; title=&quot;Sample Data&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now we&apos;ll run two different queries. The first one mark any customers as emailed that have not yet been emailed but are archived. It&apos;ll then return this recordset to the calling code. You can imagine in an actual application exeucting this statement, looping over the resultset, and emailing the associated customers. To simulate the work of emailing the customer we&apos;ll make use of the &lt;code&gt;WAITFOR... DELAY&lt;/code&gt; statement we mentioned earlier.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;BEGIN TRAN

RAISERROR(&apos;Executing update&apos;, 0, 1) WITH NOWAIT

UPDATE  Customers WITH (ROWLOCK)
SET     CustomerEmailed = 1
OUTPUT  INSERTED.Id,
        INSERTED.Email
WHERE   Archived = 1
AND     CustomerEmailed = 0

RAISERROR(&apos;Update finished&apos;, 0, 1) WITH NOWAIT

WAITFOR DELAY &apos;00:00:10&apos;

RAISERROR(&apos;Work finished&apos;, 0, 1) WITH NOWAIT

ROLLBACK TRAN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead and run this. After 10s you&apos;ll get the results. You may not see the actual result sets until the 10s delay has elapsed but if you switch to the &lt;code&gt;Messages&lt;/code&gt; tab instead of the &lt;code&gt;Results&lt;/code&gt; tab you&apos;ll see it straight away printint out the &amp;quot;Executing update&amp;quot; and &amp;quot;Update finished&amp;quot; messages. The second query we&apos;ll execute will select those customers who have been emailed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;BEGIN TRAN

RAISERROR(&apos;Selecting with READPAST&apos;, 0, 1) WITH NOWAIT

SELECT  *
FROM    Customers WITH (READPAST)
WHERE   CustomerEmailed = 1

RAISERROR(&apos;Selecting without READPAST&apos;, 0, 1) WITH NOWAIT

SELECT  *
FROM    Customers
WHERE   CustomerEmailed = 1

RAISERROR(&apos;Executing update&apos;, 0, 1) WITH NOWAIT

ROLLBACK TRAN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we execute this at the same time as the first query you will immediately get back the list of customers. And then, once the first query has finished, you&apos;ll get the second resultset. One thing to note is that if the first transaction committed you would get back &lt;strong&gt;3&lt;/strong&gt; customers in the second resultset but still only &lt;strong&gt;2&lt;/strong&gt; customer in the first resultset.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-09-06-sql-server-tricks/running-queries.png&quot; alt=&quot;Whilst executing&quot; title=&quot;Whilst executing&quot; /&gt;
Whilst both queries are executing you&apos;ll see something output something like this. Note that the lefthand side has generated its resultset as has the &lt;code&gt;READPAST&lt;/code&gt; query on the right hand side. But the second resultset on the right hasn&apos;t generated yet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-09-06-sql-server-tricks/ran-queries.png&quot; alt=&quot;Finished executing&quot; title=&quot;Finished executing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once the &lt;code&gt;WAITFOR DELAY&lt;/code&gt; has finished (and any work is committed or rolled back) the second resultset on the right will generate. You can verify that by running &lt;code&gt;sp_who2 &apos;active&apos;&lt;/code&gt; while both are running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-09-06-sql-server-tricks/blocked-by.png&quot; alt=&quot;sp_who2&quot; title=&quot;Blocked By&quot; /&gt;
Here we can see that the right hand query, SPID 52, is currently blocked by SPID 53, which is the left hand side.&lt;/p&gt;
&lt;p&gt;Hope you find these little tips helpful!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tags?</title>
      <link>http://domain/2015/08/31/tags/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2015/08/31/tags/</guid>
      <description>&lt;p&gt;After doing my initial &lt;a href=&quot;/2015/08/30/myfirstpost.html&quot;&gt;post yesterday&lt;/a&gt; I realised it&apos;d be useful to have tags (or categories, whatever your preferred nomenclature) support. It&apos;s an easy way for a user to quickly find everything relating to, say, &lt;a href=&quot;/tag/pretzel&quot;&gt;Pretzel&lt;/a&gt; without having to read about &lt;a href=&quot;/tag/cats&quot;&gt;cats&lt;/a&gt;. How do we go about getting such a feature? Remeember that Pretzel is a static blog engine. Everything is generated offline on your computer and then uploaded to your host (in my case, &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;) so there&apos;s no hitting a database to pull back the relevant files.&lt;/p&gt;
&lt;p&gt;If you investigate a little bit you&apos;ll find that when you&apos;re viewing an individual post the template used to generate the static HTML is &lt;a href=&quot;https://github.com/MrMDavidson/mrmdavidson.github.io/blob/a3b3e198dbecbbe6e86893ab0276963eb694cf70/_layouts/post.html&quot;&gt;_layouts/post.html&lt;/a&gt; which seems to have some code relating to tags;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% for tag in page.tags %}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tag/{{ tag }}&amp;quot;&amp;gt;{{ tag }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default set up has some support for it! Excellent! If you look at the mark down source files for your post you&apos;ll see there&apos;s a block of &lt;a href=&quot;http://yaml.org&quot;&gt;YAML&lt;/a&gt; at the top (actually this is something Jekyll refers to as &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; and is how it determines the file is special and needs processing. Pretzel follows this same convention). We need to add some tags to this block. The Front Matter for this post might be;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
layout: post
title: &amp;quot;Tags?&amp;quot;
tags: [ pretzel, blog ]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells Pretzel that this post has two tags associated with it; &lt;a href=&quot;/tag/pretzel&quot;&gt;Pretzel&lt;/a&gt; and &lt;a href=&quot;/tag/blog&quot;&gt;blog&lt;/a&gt;. Let&apos;s fire up Pretzel and &amp;quot;taste&amp;quot; things...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-31-tags/not-working-tags.png&quot; alt=&quot;Tag Rendering&quot; title=&quot;Tag Rendering&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Success! I&apos;ll just go click on those tag links and...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-31-tags/404-tag-not-found.png&quot; alt=&quot;404, Tag Not Found&quot; title=&quot;Tag Not Found&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I should have known that&apos;d be too easy. If you have a look about the place you&apos;ll find that there&apos;s a plugin for Jekyll to support &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#tags&quot;&gt;tags&lt;/a&gt;. But that&apos;s not that helpful to us. So back to the drawing board. I came across a post on using &lt;a href=&quot;http://www.minddust.com/post/tags-and-categories-on-github-pages/&quot;&gt;tags on Github Pages&lt;/a&gt; - it seems that Github Pages don&apos;t support the tags plugin so Jekyll users are in a similar boat to us. Interesting!&lt;/p&gt;
&lt;p&gt;Going through the steps in the &lt;a href=&quot;http://www.minddust.com/post/tags-and-categories-on-github-pages/&quot;&gt;Minddust post&lt;/a&gt; we can straight away skip the first two - the default Pretzel templates already contain markup for tags. Let&apos;s start with creating a new layout. Create a new file &lt;code&gt;_layouts/posts_by_tag.html&lt;/code&gt; and we&apos;ll copy the content from Minddust;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h1&amp;gt;Articles by tag :{{ page.tag }}&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;
    {% if site.tags[page.tag] %}
        {% for post in site.tags[page.tag] %}
            &amp;lt;a href=&amp;quot;{{ post.url }}/&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;
        {% endfor %}
    {% else %}
        &amp;lt;p&amp;gt;There are no posts for this tag.&amp;lt;/p&amp;gt;
    {% endif %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a bit of trial and error I found you don&apos;t actually need &lt;code&gt;_data/tags.yml&lt;/code&gt; either so ignore that. We do, however, have to create a template-per-tag. This is where such a method will kind of fall down. If you use lots and lots of tags this is the sort of thing that you are (&lt;em&gt;well, I am, anyhow&lt;/em&gt;) likely to forget. If you do then your readers will get a 404 when they click on a tag that you haven&apos;t &amp;quot;populated&amp;quot; yet. In lieu of a better solution we&apos;ll live with this. Now we&apos;ll create our first tag layout file - for me that&apos;s &lt;code&gt;tag/blog.md&lt;/code&gt;. (Note: The &lt;code&gt;tag&lt;/code&gt; portion is because our URLs will be of the form &lt;code&gt;tag/blog&lt;/code&gt; - if you wanted these to be of the form &lt;code&gt;my-awesome-tags/blog&lt;/code&gt; your &lt;code&gt;blog.md&lt;/code&gt; would instead live in the &lt;code&gt;my-awesome-tags&lt;/code&gt; directory. Jekyll / Pretzel will copy directories from the input to the output unless they start with an underscore).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
layout: posts_by_tag
tag: blog
permalink: /tag/blog
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing else is needed in our layout file. A couple of notes; the &lt;code&gt;layout&lt;/code&gt; value should be the filename of your layout file, without the path or extension, that you created earlier  (eg. I have &lt;code&gt;_layouts/posts_by_tag.html&lt;/code&gt; so this value is &lt;code&gt;posts_by_tag&lt;/code&gt;). The &lt;code&gt;permalink&lt;/code&gt; tag here just sets the output URL to be used. I want to serve my tag page as &lt;code&gt;/tag/blog&lt;/code&gt; instead of the default &lt;code&gt;/tag/blog.html&lt;/code&gt;.) Now that that&apos;s done let&apos;s test it out!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-31-tags/no-posts-for-tag.png&quot; alt=&quot;No articles?!?&quot; title=&quot;No posts for tag?&quot; /&gt;&lt;/p&gt;
&lt;p&gt;... And apparently I have even fewer blog posts than I thought! The good news is we aren&apos;t getting a 404 anymore. The bad news is... we&apos;re not getting our nice list of posts for the tag. What gives? I did a little digging and it turns out it&apos;s the syntax of the layout file. Whilst Pretzel is largely compatible with Jekyll it isn&apos;t 100% so. The way it does tags is one of those differences. In Jekyll it seems like it&apos;s a dictionary of tag names to posts. However in Pretzel tags are a list of tag items each of which has the name of the tag and all of the posts for that tag. (&lt;em&gt;Side note: I believe Categories work the same way&lt;/em&gt;). So our copy-pasta&apos;d layout file just isn&apos;t going to cut it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;h1&amp;gt;Posts by tag {{ page.tag }}&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;
    {% assign HasTag = false %}
    
    {% for tag in site.tags %}
        {% if tag.Name ==  page.tag %}
            {% assign HasTag = true %}
            {% for post in tag.Posts %}
                &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ post.url }}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
            {% endfor %}
        {% endif %}
    {% endfor %}
    
    {% if HasTag == false %}
        &amp;lt;p&amp;gt;There&apos;s no posts for &amp;quot;{{ page.tag }}&amp;quot;!&amp;lt;/p&amp;gt;
    {% endif %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off we&apos;re going to set a variable &lt;code&gt;HasTag&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. We&apos;ll then loop through all of the &lt;code&gt;tags&lt;/code&gt; that have been used on our site and compare the &lt;code&gt;Name&lt;/code&gt; to the &lt;code&gt;tag&lt;/code&gt; the user is currently looking at. If they match we set &lt;code&gt;HasTag&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and loop through all of the &lt;code&gt;Posts&lt;/code&gt; on the &lt;code&gt;tag&lt;/code&gt; and output a link to the post using it&apos;s title. Finally if &lt;code&gt;HasTag&lt;/code&gt; is still &lt;code&gt;false&lt;/code&gt; we can print out &amp;quot;No tags found&amp;quot; style message. Now let&apos;s try again...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-31-tags/ugly-tagged-posts.png&quot; alt=&quot;It&apos;s ugly, but it works!&quot; title=&quot;It&apos;s ugly, but it works!&quot; /&gt;&lt;/p&gt;
&lt;p&gt;... And it works! It&apos;s not pretty but it&apos;s a list of all my posts. Now why does this look so bland compared to the rest of the posts (not that they&apos;re terribly pretty, but still!). If you snoop about your setup you&apos;ll see there&apos;s &lt;code&gt;_layouts/layout.html&lt;/code&gt; which has all the base styling for your site. When you look at the default &lt;code&gt;_layouts/post.html&lt;/code&gt; you&apos;ll see at the top it has&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
layout: layout
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might look a little redundant but it&apos;s actually saying &amp;quot;Inherit the &lt;code&gt;layout&lt;/code&gt; for this file from the file stored at &lt;code&gt;_layouts/&lt;/code&gt;&lt;strong&gt;&lt;code&gt;layout&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;.html&lt;/code&gt;&amp;quot;. So, we just need to add a similar tag to our &lt;code&gt;posts_by_tag.html&lt;/code&gt;;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;---
layout: layout
---
&amp;lt;h1&amp;gt;Posts by tag {{ page.tag }}&amp;lt;/h1&amp;gt;
&amp;lt;div&amp;gt;
    {% assign HasTag = false %}
    
    {% for tag in site.tags %}
        {% if tag.Name ==  page.tag %}
            {% assign HasTag = true %}
            {% for post in tag.Posts %}
                &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;{{ post.url }}&amp;quot;&amp;gt;{{post.title}}&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
            {% endfor %}
        {% endif %}
    {% endfor %}
    
    {% if HasTag == false %}
        &amp;lt;p&amp;gt;There&apos;s no posts for &amp;quot;{{ page.tag }}&amp;quot;!&amp;lt;/p&amp;gt;
    {% endif %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-31-tags/styled-tagged-posts.png&quot; alt=&quot;Prettier styled posts&quot; title=&quot;Prettier styled posts&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And that&apos;s about it! Have a look through the list of &lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;Liquid Variables&lt;/a&gt; for other details you may wish to include on your listing page (such as the &lt;code&gt;post.date&lt;/code&gt;). And finally don&apos;t forget you&apos;ll need to go through and create a corresponding &lt;code&gt;.md&lt;/code&gt; file in &lt;code&gt;tag&lt;/code&gt; for each tag you use on your site. In the future I&apos;ll look at seeing if this is something I can automate as I&apos;m not one for doing something a computer will do much more reliably.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://domain/2015/08/30/myfirstpost/</link>
      <pubDate>Sun, 30 Aug 2015 00:00:00 %z</pubDate>
      <author>Author</author>
      <guid>http://domain/2015/08/30/myfirstpost/</guid>
      <description>&lt;p&gt;Several years ago now Scott Hanselman wrote an blog post titled &lt;a href=&quot;http://www.hanselman.com/blog/YourBlogIsTheEngineOfCommunity.aspx&quot;&gt;Your Blog is the Engine of Community&lt;/a&gt;. The basic premise of it, for those too lazy to read it,
was that you should own your own content. Sites like Twitter and Facebook are intrinsically transient and, perhaps more importantly, owned by someone else. &amp;quot;That makes sense!&amp;quot; I thought. And so I had a look about on the internet
came across &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; had a quick play and... forgot about it. And then today a friend of mine was looking at ditching Wordpress for their own blog and asked if I had any suggestions. I gave a half
hearted reply about something like &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and then... thought about it... and thought I should finally get my act together and finish playing with them myself.&lt;/p&gt;
&lt;p&gt;My initial issue last time I looked into Github Pages was that they run &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Which isn&apos;t a bad thing, it&apos;s a nice bit of software, but as a Windows developer it seemed like a bunch of things I&apos;ve only
had passing exposure to. I had a look for other static blog engines and came across &lt;a href=&quot;http://code52.org/pretzel.html&quot;&gt;Pretzel&lt;/a&gt;. Like Jekyll Pretzel generates a static blog for you from &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;
however unlike Jekyll it&apos;s written in .Net and feels more &amp;quot;natural&amp;quot; to a C# developer like myself. I did, however, have a few minor issues along the way, so I figured I&apos;d kill two birds with one stone and write about them.&lt;/p&gt;
&lt;h2&gt;1.  Getting Pretzel&lt;/h2&gt;
&lt;p&gt;Probably the easiest way to grab Pretzel is actually from &lt;a href=&quot;http://chocolatey.org&quot;&gt;Chocolatey&lt;/a&gt;. It&apos;s listed as &lt;a href=&quot;https://chocolatey.org/packages/pretzel&quot;&gt;Pretzel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This&apos;d be as simple as;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;choco install pretzel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally I grabbed the source code from their &lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Github Page&lt;/a&gt; and built it myself&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;git clone https://github.com/Code52/pretzel
cd pretzel
build.cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a while you&apos;ll end up with &lt;code&gt;artifacts\Pretzel.exe&lt;/code&gt; which you&apos;ll want to add to your path&lt;/p&gt;
&lt;h2&gt;2.  Setting up your Github Page&lt;/h2&gt;
&lt;p&gt;Github actually has really good documentation on this. The basic premise is you set up a new repository wih the name &lt;code&gt;$YourUsername$.github.io&lt;/code&gt;. Mine, for instance, is &lt;a href=&quot;https://github.com/MrMDavidson/mrmdavidson.github.io&quot;&gt;mrmdavidson.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You&apos;ll want to clone this locally, add some content, and push it...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;git clone https://github.com/MrMDavidson/mrmdavidson.github.io
cd mrmdavidson.github.io
echo &amp;quot;Hello World!&amp;quot; &amp;gt;&amp;gt; index.md
git add index.md
git commit -am &amp;quot;My first page!&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you then visit your own &lt;code&gt;$YourUsername$.github.io&lt;/code&gt; you&apos;ll see your &amp;quot;Hello World&amp;quot; page. Hooray!&lt;/p&gt;
&lt;h2&gt;3.  Now let&apos;s make use of Pretzel&lt;/h2&gt;
&lt;p&gt;To get started with Pretzel is actually pretty straight forward. We&apos;re going to jump into the directory we created early and, with Pretzel in our path, tell it to do some things&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;cd mrmdavidson.github.io
pretzel.exe create
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create all the infrastructure required for your blog and create a sample post and an &lt;a href=&quot;/about.html&quot;&gt;about&lt;/a&gt; page. But it&apos;s all in MarkDown. How do we use it?&lt;/p&gt;
&lt;p&gt;Pretzel has two main modes &amp;quot;Taste&amp;quot; and &amp;quot;Bake&amp;quot; (Because Pretzels, get it?). Taste allows you to fire everything up locally and test it. Pretzel includes everything needed for this (including an &lt;a href=&quot;http://owin.org/&quot;&gt;Owin&lt;/a&gt; based webserver).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;pretzel.exe taste -p 8081
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-30-myfirstpost/pretzel-tasting.png&quot; alt=&quot;Pretzel Tasting&quot; title=&quot;Pretzel Tasting&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You may need to play around with the &lt;code&gt;-p 8081&lt;/code&gt; argument to specify a port that&apos;s currently not in use on your machine)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This will also fire up your default browser and show you your newly created blog post. You can play around with the content by editing the file it created in the &lt;code&gt;_posts/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Once you get bored of poking at it we&apos;ll commit it and push it to your repository so it can be seen by the world!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;git add *
git commit -am &amp;quot;My new blog!&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now visit your own Github Page. Eg. &lt;a href=&quot;http://mrmdavidson.github.io&quot;&gt;mrmdavidson.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;4.  ... But something isn&apos;t right!&lt;/h2&gt;
&lt;p&gt;For me, at least, I noticed some inconsistencies between what Jekyll generated and what Pretzel generated. This seems like something that&apos;d be horrible to debug. So I poked around a little and found that you can use Github Pages
as a completely static host. You don&apos;t have to have it generate anything with Jekyll. &amp;quot;Interesting&amp;quot;, I thought. How does this work?&lt;/p&gt;
&lt;p&gt;Well, remember earlier how I said Pretzel has two modes? Tasting and Baking? We want the baking mode;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;cd mrmdavidson.github.io
pretzel.exe bake
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015-08-30-myfirstpost/pretzel-baking.png&quot; alt=&quot;Pretzel Baking&quot; title=&quot;Pretzel Baking&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Milliseconds later it&apos;ll have finished its work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now inside your repository you&apos;ll have an &lt;code&gt;_site&lt;/code&gt; directory. This is a static build of your site (Note: Anything starting with &lt;code&gt;_&lt;/code&gt; is ignored by Jekyll and Pretzel by convention). You can point your browser here and everything
should work. But if you push this to your repository it won&apos;t have the desired results. What we&apos;re going to do is place a &amp;quot;.nojekyll&amp;quot; file in our directory - this is an instruction to Github to not run Jekyll on this repository.
I know this seems counter intuitive, but trust me.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;echo &amp;quot;&amp;quot; &amp;gt; .nojekyll
git add .nojekyll
git commit -am &amp;quot;Opt out of Jekyll generation&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you visit your lovely blog... it&apos;ll be completely broken. How is this helpful? Stay with me here!&lt;/p&gt;
&lt;p&gt;What we&apos;re going to do is create a new branch. &lt;a href=&quot;https://github.com/MrMDavidson/mrmdavidson.github.io/tree/master&quot;&gt;Master&lt;/a&gt; will be used for the generated content of the site. And our new branch, say, &lt;a href=&quot;https://github.com/MrMDavidson/mrmdavidson.github.io/tree/pretzel&quot;&gt;Pretzel&lt;/a&gt;
will be used to store our working blog. This way both our blog &amp;quot;data&amp;quot; and our generated site is under source control.&lt;/p&gt;
&lt;p&gt;To avoid confusion we&apos;ll create two new copies of the repository...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;git clone https://github.com/MrMDavidson/mrmdavidson.github.io mrmdavidson.github.io-blog
git clone https://github.com/MrMDavidson/mrmdavidson.github.io mrmdavidson.github.io-generated
cd mrmdavidson.github.io-blog
git checkout -B pretzel
git push origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what we&apos;ll do is create blog posts in the &lt;code&gt;mrmdavidson.github.io-blog&lt;/code&gt; directory which pushes to a &amp;quot;Pretzel&amp;quot; branch. Once we&apos;ve finished tasting these we can generate the static content into master.
Let&apos;s start by cleaning master. You&apos;ll want to delete from git everything in here but your &lt;code&gt;.nojekyll&lt;/code&gt; file. Once you&apos;ve done that...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;cd mrmdavidson.github.io-blog
pretzel.exe bake --destination ..\mrmdavidson.github.io-generated\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--destination&lt;/code&gt; switch tells Pretzel to generate to a specific, relative-to-current, directory. In this example we&apos;re going to generate to our working copy of the Master branch.&lt;/p&gt;
&lt;p&gt;We can now add everything in here and push to master...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;cd mrmdavidson.github.io-generated
git add *
git commit -am &amp;quot;Initial generated version of the blog!&amp;quot;
git push origin
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;5. Automating it...&lt;/h2&gt;
&lt;p&gt;That all seems a bit tedious, but repeatable, so what I did was create a &lt;a href=&quot;https://github.com/MrMDavidson/mrmdavidson.github.io/blob/4a609925cfaf57f94a48322c3cc1f7af4acb77bc/generate.bat&quot;&gt;generate.bat&lt;/a&gt; in my Pretzel branch that bakes the blog, adds everything to git, and pushes it to master...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dos&quot;&gt;pretzel bake --destination ..\mrmdavidson.github.io-generated\
pushd ..\mrmdavidson.github.io-generated
git add *
git commit -am &amp;quot;Generated site&amp;quot;
git push origin
popd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way once I&apos;m finished tasting my blog locally I can just run &lt;code&gt;generate.bat&lt;/code&gt; and seconds later everything is available to the public!&lt;/p&gt;</description>
    </item>
    
  </channel> 
</rss>